// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: messages.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (user_id, content, created_at)
VALUES ($1, $2, $3)
RETURNING user_id, content, created_at
`

type CreateMessageParams struct {
	UserID    pgtype.UUID
	Content   string
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage, arg.UserID, arg.Content, arg.CreatedAt)
	var i Message
	err := row.Scan(&i.UserID, &i.Content, &i.CreatedAt)
	return i, err
}

const listMessages = `-- name: ListMessages :many
SELECT m.user_id, m.content, m.created_at, u.username
FROM messages m
JOIN users u ON m.user_id = u.user_id
WHERE (
  $1::TIMESTAMPTZ IS NULL OR m.created_at > $1::TIMESTAMPTZ
)
ORDER BY m.created_at ASC
LIMIT 50
`

type ListMessagesRow struct {
	UserID    pgtype.UUID
	Content   string
	CreatedAt pgtype.Timestamptz
	Username  string
}

func (q *Queries) ListMessages(ctx context.Context, since pgtype.Timestamptz) ([]ListMessagesRow, error) {
	rows, err := q.db.Query(ctx, listMessages, since)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListMessagesRow
	for rows.Next() {
		var i ListMessagesRow
		if err := rows.Scan(
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
