// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Base() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Chat app</title><link rel=\"stylesheet\" href=\"/static/output.css\"><script src=\"/static/htmx.min.js\"></script><script src=\"/static/htmx-ext-ws.js\"></script></head><body class=\"bg-gray-100 dark:bg-gray-900 flex items-center justify-center min-h-screen p-4 font-sans overflow-hidden\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = ChatWindow().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<script>\n\t\t\t\t// Check if a username is stored in the local storage.\n\t\t\t\tlet username = localStorage.getItem(\"username\");\n\t\t\t\tif (!username) {\n\t\t\t\t\tusername = prompt(\"Please enter a username:\", \"Anonymous\");\n\t\t\t\t\tlocalStorage.setItem(\"username\", username);\n\t\t\t\t}\n\n\t\t\t\t// Create uuid for each connection.\n\t\t\t\tlet userid = localStorage.getItem(\"userid\");\n\t\t\t\tif (!userid) {\n\t\t\t\t\tuserid = crypto.randomUUID();\n\t\t\t\t\tlocalStorage.setItem(\"userid\", userid);\n\t\t\t\t}\n\n\t\t\t\t// We must inject username and uuid into the websocket URL before it makes its first\n\t\t\t\t// request to the server.\n\t\t\t\tlet tempURL = new URL(\"/ws\", window.location.origin);\n\t\t\t\ttempURL.searchParams.append(\"userid\", userid);\n\t\t\t\ttempURL.searchParams.append(\"username\", username);\n\t\t\t\tlet wsURL = tempURL.toString();\n\n\t\t\t\tlet chatWindow = document.querySelector(\"div[ws-connect]\");\n\t\t\t\tif (chatWindow) {\n\t\t\t\t\tchatWindow.setAttribute(\"ws-connect\", wsURL);\n\t\t\t\t}\n\t\t\t</script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
